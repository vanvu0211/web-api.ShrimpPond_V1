name: CI/CD Pipeline for ShrimpPond.Host

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List directory contents
        run: dir

      - name: List ShrimpPond.Host contents
        run: dir ShrimpPond.Host

      - name: Verify ShrimpPond.Host directory
        run: cd ShrimpPond.Host && dir

      - name: Restore dependencies
        run: dotnet restore ShrimpPond_CleanArchitecture.sln

      - name: Build ShrimpPond.Host
        run: dotnet build ShrimpPond.Host/ShrimpPond.Host.csproj --configuration Release --no-restore

      - name: Clean publish directory
        run: if (Test-Path ./publish) { Remove-Item -Recurse -Force ./publish }
        shell: pwsh

      - name: Publish ShrimpPond.Host
        run: dotnet publish ShrimpPond.Host/ShrimpPond.Host.csproj --configuration Release --output ./publish --no-build --no-restore --no-dependencies

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: shrimppond-host-app-${{ github.run_number }}
          path: ./publish/

  deploy:
    needs: build
    runs-on: windows-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: shrimppond-host-app-${{ github.run_number }}
          path: ./publish/

      - name: Deploy to VPS
        run: |
          Set-Item -Path WSMan:\localhost\Client\TrustedHosts -Value $env:VPS_IP -Force
          $securePassword = ConvertTo-SecureString $env:VPS_PASSWORD -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($env:VPS_USERNAME, $securePassword)
          try {
            $session = New-PSSession -ComputerName $env:VPS_IP -Credential $credential -ErrorAction Stop
            Invoke-Command -Session $session -ScriptBlock { 
              if (Test-Path "C:\ShrimpPond\Host\backup") { Remove-Item "C:\ShrimpPond\Host\backup" -Recurse -Force }
              if (Test-Path "C:\ShrimpPond\Host") { Move-Item "C:\ShrimpPond\Host" "C:\ShrimpPond\Host\backup" -Force }
              New-Item -ItemType Directory -Path "C:\ShrimpPond\Host" -Force
            }
            Copy-Item -Path ./publish/* -Destination "C:\ShrimpPond\Host" -ToSession $session -Recurse -Force
            Invoke-Command -Session $session -ScriptBlock { 
              if (Get-Service -Name ShrimpPondHostService -ErrorAction SilentlyContinue) {
                Restart-Service -Name ShrimpPondHostService -ErrorAction SilentlyContinue
              } else {
                Write-Host "Service ShrimpPondHostService not found, please start manually."
              }
            }
          } catch {
            Write-Error "Deployment failed: $_"
            exit 1
          } finally {
            if ($session) { Remove-PSSession -Session $session }
          }
        env:
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        shell: pwsh